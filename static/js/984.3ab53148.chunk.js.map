{"version":3,"file":"static/js/984.3ab53148.chunk.js","mappings":"sUAEaA,EAAWC,EAAAA,EAAAA,GAAH,+MAWRC,EAAWD,EAAAA,EAAAA,GAAH,gKAQRE,EAAQF,EAAAA,EAAAA,IAAH,gMAULG,EAAOH,EAAAA,EAAAA,IAAH,sFAMJI,EAAOJ,EAAAA,EAAAA,EAAH,sG,SCJjB,EA9Ba,SAAC,GAAe,IAAbK,EAAY,EAAZA,MAEd,OACE,SAACN,EAAD,UACGM,EAAMC,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,UAAWC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,aACjC,OACE,UAACT,EAAD,YACE,0BACE,SAACC,EAAD,CACES,IACED,EATA,kCAUcA,EACV,yBAENE,IAAI,QACJC,MAAM,MACNC,OAAO,WAGX,UAACX,EAAD,YACE,kCAAUM,MACV,UAACL,EAAD,yBAAkBI,UAfPD,EAmBlB,KAGN,EC7BYQ,EAAQf,EAAAA,EAAAA,EAAH,yI,2BCwClB,EAnCiB,WACf,OAA4BgB,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA4BF,EAAAA,EAAAA,UAAS,QAArC,eAAOG,EAAP,KAAeC,EAAf,KACQb,GAAOc,EAAAA,EAAAA,MAAPd,GAkBR,OAhBAe,EAAAA,EAAAA,YAAU,WACRF,EAAU,YACVG,EAAAA,EAAAA,IAAgBhB,GACbiB,MAAK,SAAAC,GACJP,EAAUO,EAASC,MACnBN,EAAU,WACX,IACAO,OAAM,SAAAC,GACLR,EAAU,YACVS,QAAQC,IAAIF,EACb,IACAG,SAAQ,YACPC,EAAAA,EAAAA,IACD,GACJ,GAAE,CAACzB,KAGF,2BACc,YAAXY,IAAwBc,EAAAA,EAAAA,KACb,aAAXd,GAAyBF,EAAOiB,OAAS,IAAK,SAAC,EAAD,CAAM7B,MAAOY,IACzC,IAAlBA,EAAOiB,SACN,SAACnB,EAAD,qEAEU,aAAXI,IACC,kFAIP,C,8LCtCKgB,EAAM,mCACNC,EAAW,+BAEV,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,sGAEGC,EAFH,UAEYF,EAFZ,uCAEmDD,EAFnD,oBAGoBI,EAAAA,GAAAA,IAAUD,GAH9B,cAGGb,EAHH,yBAIIA,EAASe,MAJb,gCAMHX,QAAQC,IAAR,MANG,gFAUA,SAAeW,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,yFAEGJ,EAFH,UAEYF,EAFZ,iCAE6CD,EAF7C,kBAE0DO,EAF1D,oBAGoBH,EAAAA,GAAAA,IAAUD,GAH9B,cAGGb,EAHH,yBAIIA,EAASe,MAJb,gCAMHX,QAAQC,IAAR,MANG,gFAUA,SAAea,EAAtB,+CAAO,OAAP,oBAAO,WAAgCpC,GAAhC,yFAEG+B,EAFH,UAEYF,EAFZ,kBAE8B7B,EAF9B,oBAE4C4B,GAF5C,SAGoBI,EAAAA,GAAAA,IAAUD,GAH9B,cAGGb,EAHH,yBAIIA,EAASe,MAJb,gCAMHX,QAAQC,IAAR,MANG,gFAUA,SAAeP,EAAtB,+CAAO,OAAP,oBAAO,WAA+BhB,GAA/B,yFAEG+B,EAFH,UAEYF,EAFZ,kBAE8B7B,EAF9B,4BAEoD4B,GAFpD,SAGoBI,EAAAA,GAAAA,IAAUD,GAH9B,cAGGb,EAHH,yBAIIA,EAASe,MAJb,gCAMHX,QAAQC,IAAR,MANG,gFAUA,SAAec,EAAtB,+CAAO,OAAP,oBAAO,WAA8BrC,GAA9B,yFAEG+B,EAFH,UAEYF,EAFZ,kBAE8B7B,EAF9B,4BAEoD4B,EAFpD,oBAGoBI,EAAAA,GAAAA,IAAUD,GAH9B,cAGGb,EAHH,yBAIIA,EAASe,MAJb,gCAMHX,QAAQC,IAAR,MANG,gF","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","pages/CastPage/CastPage.styled.jsx","pages/CastPage/CastPage.jsx","services/api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const CastList = styled.ul`\n  list-style: none;\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: center;\n  padding-right: 100px;\n  padding-left: 100px;\n  margin-left: -20px;\n`;\n\nexport const CastItem = styled.li`\n  flex-basis: calc ((100% - 4 * 30px) / 4);\n  margin-left: 20px;\n  margin-bottom: 20px;\n  border-radius: 10px;\n  overflow: hidden;\n`;\n\nexport const Image = styled.img`\n  border-radius: 50%;\n  object-fit: cover;\n  transition: all 600ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover {\n    transform: scale(0.7);\n    cursor: pointer;\n  }\n`;\n\nexport const Info = styled.div`\n  width: 250px;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const Role = styled.p`\n  font-family: 'Metal Mania', cursive;\n  &:hover {\n    color: yellow;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { CastList, CastItem, Image, Info, Role } from './Cast.styled';\n\nconst Cast = ({ items }) => {\n  const baseUrl = 'https://image.tmdb.org/t/p/w500';\n  return (\n    <CastList>\n      {items.map(({ id, character, name, profile_path }) => {\n        return (\n          <CastItem key={id}>\n            <div>\n              <Image\n                src={\n                  profile_path\n                    ? baseUrl + profile_path\n                    : './images/no-photo_info'\n                }\n                alt=\"actor\"\n                width=\"200\"\n                height=\"200\"\n              />\n            </div>\n            <Info>\n              <p>Name: {name}</p>\n              <Role>Character: {character}</Role>\n            </Info>\n          </CastItem>\n        );\n      })}\n    </CastList>\n  );\n};\n\nexport default Cast;\n\nCast.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired,\n      character: PropTypes.string.isRequired,\n      profile_path: PropTypes.string,\n    }).isRequired\n  ),\n};\n","import styled from '@emotion/styled';\n\nexport const Error = styled.p`\n  margin-top: 24px;\n  color: blue;\n  font-weight: 500;\n  font-size: 16px;\n  font-family: 'Exo', sans-serif;\n`;\n","import { getMovieCredits } from 'services/api';\nimport Cast from 'components/Cast';\nimport { Error } from './CastPage.styled';\nimport { useEffect, useState } from 'react';\nimport { startLoader, stopLoader } from 'components/Loader';\nimport { useParams } from 'react-router-dom';\n\nconst CastPage = () => {\n  const [actors, setActors] = useState([]);\n  const [status, setStatus] = useState('idle');\n  const { id } = useParams();\n\n  useEffect(() => {\n    setStatus('pending');\n    getMovieCredits(id)\n      .then(response => {\n        setActors(response.cast);\n        setStatus('resolved');\n      })\n      .catch(error => {\n        setStatus('rejected');\n        console.log(error);\n      })\n      .finally(() => {\n        stopLoader();\n      });\n  }, [id]);\n\n  return (\n    <div>\n      {status === 'pending' && startLoader()}\n      {status === 'resolved' && actors.length > 0 && <Cast items={actors} />}\n      {actors.length === 0 && (\n        <Error>We don't have any information about cast of this movie</Error>\n      )}\n      {status === 'rejected' && (\n        <p>Ups... Something went wrong. Please try again later.</p>\n      )}\n    </div>\n  );\n};\n\nexport default CastPage;\n","import axios from 'axios';\n\nconst KEY = '0d230252106f56106b4162aa542b588d';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport async function getTrendingMovies() {\n  try {\n    const url = `${BASE_URL}/trending/movie/day?api_key=${KEY}&page=1`;\n    const response = await axios.get(url);\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getMoviesByName(searchQuery) {\n  try {\n    const url = `${BASE_URL}/search/movie?api_key=${KEY}&query=${searchQuery}&page=1`;\n    const response = await axios.get(url);\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getMoviesDetails(id) {\n  try {\n    const url = `${BASE_URL}/movie/${id}?api_key=${KEY}`;\n    const response = await axios.get(url);\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getMovieCredits(id) {\n  try {\n    const url = `${BASE_URL}/movie/${id}/credits?api_key=${KEY}`;\n    const response = await axios.get(url);\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getMovieReview(id) {\n  try {\n    const url = `${BASE_URL}/movie/${id}/reviews?api_key=${KEY}&page=1`;\n    const response = await axios.get(url);\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n"],"names":["CastList","styled","CastItem","Image","Info","Role","items","map","id","character","name","profile_path","src","alt","width","height","Error","useState","actors","setActors","status","setStatus","useParams","useEffect","getMovieCredits","then","response","cast","catch","error","console","log","finally","stopLoader","startLoader","length","KEY","BASE_URL","getTrendingMovies","url","axios","data","getMoviesByName","searchQuery","getMoviesDetails","getMovieReview"],"sourceRoot":""}